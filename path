
'''
This is the core Path planning module. To understand this file, begin with Astar.driver() 

The Astar class driver method is called from differentBoundary.py

'''
import math
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error
import json
import chcone

show_animation_astar = False
show_animation_driver = True

class AStarPlanner:

    def __init__(self, ox, oy, resolution, rr):
        """
        Initialize grid map for a star planning

        ox: x position list of Obstacles [m]
        oy: y position list of Obstacles [m]
        resolution: grid resolution [m]
        rr: robot radius[m]
        """

        self.resolution = resolution
        self.rr = rr
        self.min_x, self.min_y = 0, 0
        self.max_x, self.max_y = 0, 0
        self.obstacle_map = None
        self.x_width, self.y_width = 0, 0
        self.motion = self.get_motion_model()
        self.calc_obstacle_map(ox, oy)

    class Node:
        def __init__(self, x, y, cost, parent_index):
            self.x = x  # index of grid
            self.y = y  # index of grid
            self.cost = cost
            self.parent_index = parent_index

        def __str__(self):
            return str(self.x) + "," + str(self.y) + "," + str(
                self.cost) + "," + str(self.parent_index)

    def planning(self, sx, sy, gx, gy):
        """
        A star path search

        input:
            s_x: start x position [m]
            s_y: start y position [m]
            gx: goal x position [m]
            gy: goal y position [m]

        output:
            rx: x position list of the final path
            ry: y position list of the final path
        """

        start_node = self.Node(self.calc_xy_index(sx, self.min_x),
                               self.calc_xy_index(sy, self.min_y), 0.0, -1)
        goal_node = self.Node(self.calc_xy_index(gx, self.min_x),
                              self.calc_xy_index(gy, self.min_y), 0.0, -1)

        open_set, closed_set = dict(), dict()
        open_set[self.calc_grid_index(start_node)] = start_node
        # print("open_set1:",open_set)
        global iter
        iter = 0
        global iter_flag
        global curr_flag
        curr_flag = False 
        iter_flag = False
        
        while 1:
            if len(open_set) == 0:
                print("Open set is empty..")
                curr_flag = True
                break

            c_id = min(
                open_set,
                key=lambda o: open_set[o].cost + self.calc_heuristic(goal_node,
                                                                     open_set[
                                                                         o]))
            current = open_set[c_id]
            # show graph
            if show_animation_astar:  # pragma: no cover
                # print("plotting...")
                plt.plot(self.calc_grid_position(current.x, self.min_x),
                         self.calc_grid_position(current.y, self.min_y), "xc")
                # for stopping simulation with the esc key.
                plt.gcf().canvas.mpl_connect('key_release_event',
                                             lambda event: [exit(
                                                 0) if event.key == 'escape' else None])
                if len(closed_set.keys()) % 10 == 0:
                    plt.pause(0.001)



            if current.x == goal_node.x and current.y == goal_node.y:
                # print("Find goal")
                goal_node.parent_index = current.parent_index
                goal_node.cost = current.cost
                break
            
            # Remove the item from the open set
            del open_set[c_id]

            # Add it to the closed set
            closed_set[c_id] = current

            # expand_grid search grid based on motion model
            for i, _ in enumerate(self.motion):
                node = self.Node(current.x + self.motion[i][0],
                                 current.y + self.motion[i][1],
                                 current.cost + self.motion[i][2], c_id)
                n_id = self.calc_grid_index(node)

                
               
                # If the node is not safe, do nothing
                if not self.verify_node(node):
                    continue

                if n_id in closed_set:
                    continue

                if n_id not in open_set:
                    open_set[n_id] = node  # discovered a new node
                else:
                    if open_set[n_id].cost > node.cost:
                        # This path is the best until now. record it
                        open_set[n_id] = node
 
            iter += 1
            if(iter > 500):
                curr_flag = True
                break
        
        rx=[]
        ry=[]
        
        if curr_flag is False:
            rx, ry = self.calc_final_path(goal_node, closed_set)
        
        return rx, ry, curr_flag

    def calc_final_path(self, goal_node, closed_set):
        # generate final course
        rx, ry = [self.calc_grid_position(goal_node.x, self.min_x)], [
            self.calc_grid_position(goal_node.y, self.min_y)]
        parent_index = goal_node.parent_index
        while parent_index != -1:
            n = closed_set[parent_index]
            rx.append(self.calc_grid_position(n.x, self.min_x))
            ry.append(self.calc_grid_position(n.y, self.min_y))
            parent_index = n.parent_index

        return rx, ry

    @staticmethod
    def calc_heuristic(n1, n2):
        w = 1.0  # weight of heuristic
        d = w * math.hypot(n1.x - n2.x, n1.y - n2.y)
        return d

    def calc_grid_position(self, index, min_position):
        """
        calc grid position

        :param index:
        :param min_position:
        :return:
        """
        pos = index * self.resolution + min_position
        return pos

    def calc_xy_index(self, position, min_pos):
        return round((position - min_pos) / self.resolution)

    def calc_grid_index(self, node):
        return (node.y - self.min_y) * self.x_width + (node.x - self.min_x)

    def verify_node(self, node):
        px = self.calc_grid_position(node.x, self.min_x)
        py = self.calc_grid_position(node.y, self.min_y)

        if px < self.min_x:
            return False
        elif py < self.min_y:
            return False
        elif px >= self.max_x:
            return False
        elif py >= self.max_y:
            return False

        try:
            if self.obstacle_map[int(node.x)][int(node.y)]:
                return False
        except(IndexError):
            return False

        return True

    def calc_obstacle_map(self, ox, oy):

        self.min_x = round(min(ox))
        self.min_y = round(min(oy))
        self.max_x = round(max(ox))
        self.max_y = round(max(oy))

        self.x_width = int(round((self.max_x - self.min_x) / self.resolution))
        self.y_width = int(round((self.max_y - self.min_y) / self.resolution))
        
        # obstacle map generation
        self.obstacle_map = [[False for _ in range(self.y_width)]
                             for _ in range(self.x_width)]
        for ix in range(self.x_width):
            x = self.calc_grid_position(ix, self.min_x)
            for iy in range(self.y_width):
                y = self.calc_grid_position(iy, self.min_y)
                for iox, ioy in zip(ox, oy):
                    d = math.hypot(iox - x, ioy - y)
                    if d <= self.rr:
                        self.obstacle_map[ix][iy] = True
                        break

    @staticmethod
    def get_motion_model():
        # dx, dy, cost
        motion = [[1, 0, 1],
                  [0, 1, 1],
                  [-1, 0, 1],
                  [0, -1, 1],
                  [-1, -1, math.sqrt(1)],
                  [-1, 1, math.sqrt(1)],
                  [1, -1, math.sqrt(1)],
                  [1, 1, math.sqrt(1)]]

        return motion


class Astar():
    
    def __init__(self):
        
        self.gx, self.gy = 0 ,0
        self.grid_size = 20.0  # [cm]
        self.robot_radius= 80.0  # [cm]  robot_radius>grid_size always!!!
        self.ox, self.oy = [], []
        self.sx = 1000
        self.sy = 0
        self.show_animation = False
        self.prev_flag = False
        self.curr_flag = False
    
    def get_regression_angle(self, points):

        x = []
        y = []

        for i in range(len(points)):
            x.append(points[i][0])
            y.append(points[i][1])
    
        x = np.array(x)
        y = np.array(y)
        x = x.reshape((-1, 1))
        y = y.reshape((-1, 1))

        model = LinearRegression()
        y_poly = PolynomialFeatures(degree=1).fit_transform(y)
        model.fit(y_poly,x)
        x_pred = model.predict(y_poly)

        p1x = x_pred[0][0]
        p1y = y[0][0]
        p2x = -1
        p2y = -1

        for i in range(1, len(x_pred)):
            pointx = x_pred[i][0]
            pointy = y[i][0]

            # print(pointx)
            if pointx!= p1x or pointy != p1y:
                p2x = pointx
                p2y = pointy
                break
        
        slope = (p2y-p1y)/(p2x-p1x)
        ang = round(math.degrees(math.atan(slope)))
        rmse= math.sqrt(mean_squared_error(x, x_pred))
        return ang, rmse

        
    def get_regression_angle_old(self, points):
    
        x = []
        y = []
        flag = False

        for i in range(len(points)):
            x.append(points[i][0])
            y.append(points[i][1])
        
        ### To handle the case where only 1 cone is visible
        if len(points) == 1:
            flag = True

        x = np.array(x)
        y = np.array(y)
        x = x.reshape((-1, 1))
        y = y.reshape((-1, 1))

        threshold_rmse = 130
        model = LinearRegression()
        model.fit(y,x)
        x_pred = model.predict(y)
        rmse= math.sqrt(mean_squared_error(x, x_pred))
        
        if rmse < threshold_rmse:
            pass  				#if rmse is small then dont add the point of car
        else:
            ### Append Car point as bias only when rmse is very large i.e cones are on both side
            print("Appending car")
            np.append(points,[1000,0])
            x=[]
            y=[]
            for i in range(len(points)):
                x.append(points[i][0])
                y.append(points[i][1])
            x = np.array(x)
            y = np.array(y)    
            x = x.reshape((-1, 1))
            y = y.reshape((-1, 1))

        try:
            model = LinearRegression()
            y_poly = PolynomialFeatures(degree=1).fit_transform(y)
            model.fit(y_poly,x)
        except:
            return 90

        x_pred = model.predict(y_poly)

        p1x = x_pred[0][0]
        p1y = y[0][0]
        p2x = -1
        p2y = -1

        for i in range(1, len(x_pred)):
            pointx = x_pred[i][0]
            pointy = y[i][0]

            # print(pointx)
            if pointx!= p1x or pointy != p1y:
                p2x = pointx
                p2y = pointy
                break

        # print("Chosen points: x= {},{}; y= {},{}".format(p1x,p1y, p2x, p2y))
        slope = (p2y-p1y)/(p2x-p1x)
        ang = round(math.degrees(math.atan(slope)))

        ### To handle the case where only 1 cone is visible
        if flag is True:
            ang *= (-0.5)

        # print("RMSE:",rmse)
        # print("Regression ang: ", ang)
        return ang, rmse

    def eliminate_extra_cones(self, points):

        point_list = []
        x1=700
        x2=1250
        y=1030

        for i in points:
            if i[0] >= x1 and i[0] <= x2 and i[1] <=y:
                point_list.append(i)
        
        return np.array(point_list)

    def set_goal_point(self, points):

        regression_angle, rmse = self.get_regression_angle(points)

        goal_points = [(700, 1030), (975, 1030), (1250, 1030)]
        flag = False

        if len(points)>4:
            
            if rmse < 130:
                angle_ranges =  [(-85, -10), (-90, -86), (86,90), (10, 86)]
            else:
                angle_ranges = [(-74, -10), (-90, -75), (75,90), (10, 74)]
            gx = -1
            gy = -1
            cone_y=1030

            for i in range(len(angle_ranges)):
                j = angle_ranges[i]
                if regression_angle >= j[0] and regression_angle <= j[1]:

                    if i==1 or i==2:
                        i=1
                    elif i==3:
                        i=2

                    gx = goal_points[i][0]
                    gy = goal_points[i][1]

                    break

            # print("goal pt initial:" ,gx,gy)
            
            if gx == -1 or gy == -1:
                print("GOAL POINT MAI GADBAD HAI")

            
            '''
            if gx == goal_points[0][0] and points[-1][0] > gx:

                gx += int(550/4)

            elif  gx == goal_points[2][0] and points[-1][0] < gx:

                gx -= int(550/4)
            '''

            #### Check if goal point is close to the last cone
            #### Update the goal point according to the last cone
            y = 1030
            while True:

                cone_y -= 150
                if points[0][1] > cone_y:
                    gy = cone_y
                    break

        else:

            flag=True
            gx = 1000
            gy = 150

        # print ("gy after while loop",gy)

        # print("goal pts after while loop :",gx,gy)

        return gx, gy, regression_angle, rmse, flag

    def check_goal_point(self, gx, gy, reg_ang, points):

        goal_points = [(700, 1030), (975, 1030), (1250, 1030)]

        for i in range(len(points)):
            dist = math.sqrt((gy-points[i][1])**2+(gx-points[i][0])**2)
            if(dist<85):
                
                # Using formulae of trigonometry -> d=Hypo, b=Base, o=Opposite
                d = 100-dist
                b = math.sin(math.radians(45)) * d   #b=base -> change in X
                o = math.cos(math.radians(45)) * d   #o=opposite -> change in Y

                if gx == goal_points[0][0]:
                    gx+=(b)
                    gy-=(o)
                elif gx == goal_points[1][0]:
                    gy-=(100-dist)
                elif gx == goal_points[2][0]: 
                    gx-=(b)
                    gy-=(o) 
        # flag = False
        # string=""
        # ll = []

        # for i in range(len(points)):

        #     dist = math.sqrt((gy-points[i][1])**2+(gx-points[i][0])**2)
        #     # print("Inside check goal point")
        #     if(dist<85):
        #         string = "gc changed"
        #         ll.append(points[i])
        #         print(points[i])
        #         if reg_ang > 0:
        #             gx += (150-dist)
        #         else:
        #             gx -= (150-dist)

                # if reg_ang <= angle_ranges[2][1] and reg_ang >= angle_ranges[2][0]:
                    
                # elif reg_ang <= angle_ranges[0][0] and reg_ang >= angle_ranges[0][1]:
                
                # elif reg_ang < angle_ranges[1][0] or reg_ang >= angle_ranges[1][1]:
        # print("goal point after check_goal_point() :", gx,gy)     
        # print(string, ll)   
        return gx ,gy        

    def path_plan_plot(self, ox, oy, sx, sy, gx, gy, new_rx, new_ry, extra_points):

        extraX = []
        extraY = []
        for i in extra_points:
            extraX.append(i[0])
            extraY.append(i[1])
            
        plt.plot(ox, oy, ".k")
        plt.plot(sx, sy, "og")
        plt.plot(gx, gy, "xb")
        plt.plot(extraX, extraY, ".y")
        plt.plot(new_rx, new_ry, ".r")
        plt.grid(True)
        plt.axis("equal")
        plt.pause(5)
        plt.clf()
        plt.cla()
    
    def prints(self,points_ground, path):
        print("PATH PLAN DEBUGGING---------------")
        print("goal point:", self.gx,self.gy)
        print("cones:", points_ground)
        print("path :",path)
        print("TOTAL RESULT COORDINATES: ", len(path))
        print("show_animation",self.show_animation)
        print("-----------------------------------------")
        
        
    def driver(self, myBox):
        # print("Astar begins-----------------")
        ### Eliminate extra cones that are not required for path determination
        points = self.eliminate_extra_cones(myBox)
        
        ### Separate x,y corrds of obstacles
        self.ox = []
        self.oy = []
        for i in range(points.shape[0]):
            self.ox.append(points[i][0])
            self.oy.append(points[i][1])
        
        ### Points for testing on desmos
        points_ground=[]
        for i in points:
            points_ground.append(tuple(i))
            
        ### Get Obstacle list
        obstacles=list(zip(self.ox,self.oy))
        s_ob=sorted(obstacles,key=lambda l:l[1], reverse=True)  
        s_ob = np.array(s_ob)
        
        # print("Obstacle list is ready")
        ### Get goal point
        self.gx, self.gy, reg_ang, rmse, flag = self.set_goal_point(s_ob)   
        goal = (self.gx, self.gy)

        ### Appending extra cones at specified boundary
        # ([(700,280),(1250,280),(700,430),(1250,430),(700,580),(1250,580),(700,730),(1250,730),(700,880),(1250,880),(700,1030),(1250,1030)])
        extra_points=[(850,140),
                    (1125,140),
                    (800, 0),
                    (1150, 0),
                    (700,280),
                    (1250,280),
                    (700,430),
                    (1250,430),
                    (700,580),
                    (1250,580),
                    (700,730),
                    (1250,730),
                    (700,880),
                    (1250,880)]
        
        ### Append extra cones at start and goal point
        extra_points.append((self.sx - 100, self.sy - 100))
        extra_points.append((self.sx + 100, self.sy - 100))
        extra_points.append((self.gx - 100, self.gy + 100))
        extra_points.append((self.gx + 100, self.gy + 100))
        
        if flag is True:
            self.curr_flag = True

        else:
            
            ### Removing the goal point from list
            if goal in extra_points:
                extra_points.remove(goal)
            
            s_ob = s_ob.tolist()
            for i in range(len(extra_points)):
                self.ox.append(extra_points[i][0])
                self.oy.append(extra_points[i][1])
                s_ob.append(extra_points[i])
                points_ground.append(tuple(extra_points[i]))
            
            ### Check for goal point collision
            s_ob=sorted(obstacles,key=lambda l:l[1], reverse=True)  
            s_ob = np.array(s_ob)
            self.gx, self.gy = self.check_goal_point(self.gx, self.gy, reg_ang, s_ob)

            ### Astar core function. Get path.
            a_star = AStarPlanner(self.ox, self.oy, self.grid_size, self.robot_radius)
            rx, ry, self.curr_flag = a_star.planning(self.sx, self.sy, self.gx, self.gy)

        new_rx = []
        new_ry = []

        print(s_ob)

        ### Case: When Path is not found
        ### Turn small right to gain new perception view
        ### If path not found in right turn, turn left for new perception view
        if self.curr_flag == True and self.prev_flag == False:
            print("Path not found, turning right")
            new_rx = [1015]
            new_ry = [80]
            self.prev_flag = True
        
        elif self.prev_flag == True and self.curr_flag == True:
            print("Path not found, turning left")
            new_rx = [985]
            new_ry = [80]
            self.prev_flag = True

        elif self.curr_flag == False:
            self.prev_flag = False
        
               
        #### Reduce the size of path coordinates
        #### Send every 10Th path point (Distance between each points = grid_size*3)
        if self.curr_flag == False:
            for i in range(len(rx)):
                if i%10==0:
                    new_rx.append(rx[i])
                    new_ry.append(ry[i])
        path = list(zip(new_rx,new_ry))
        path=sorted(path,key=lambda l:l[1], reverse=False) 
        
        if show_animation_driver is True:
            chcone.plot_cv2(self.ox, self.oy, self.sx, self.sy, self.gx, self.gy, new_rx, new_ry, extra_points,i,rmse, reg_ang)
        
        # Print statements
        # self.prints(points_ground, path)
        # print("Astar ends-----------------")
        return path, self.ox, self.oy, self.sx, self.sy, self.gx, self.gy, new_rx, new_ry,extra_points, rmse, reg_ang
        # return path
            
            
def main(onSinglePoint):
    
    points = []
    
    if onSinglePoint:
        points = [(1000,650),(1150,1030),(1200,280),(800,430),(1200,430),(800,580),(1200,580),(800,730),(1200,730),(800,880),(1200,880),(800,1030),(1200,1030)]
        # points = [(850,320),(940,420),(1030,520),(1120,620),(1100,280)]
        # points = [(850,320),(900,450),(960,580),(1040,700),(1100,280)]
        # points = ([(800,280),(1000,500),(1200,280),(800,430),(1200,430),(800,580),(1200,580),(750,730),(1150,730),(700,880),(1100,880),(650,1030),(1050,1030)])
        # points = ([(800,280),(1000,500),(1200,280),(850,430),(1200,430),(900,530),(1000,610),(1100,720),(1200,830)])
        astar = Astar()
        path = astar.driver(points)

        # print(path)
    
    else:
        json_filename = r"C:\Users\Jemit\Documents\VCET-Driverless\9-6-2022\Top View Corrected\test12.json"
        with open(json_filename) as f:
            json_data = json.load(f)
        i=0
        while(i <  len(json_data[1]['log_data']) ):
            points = json_data[1]['log_data'][i]['my_box']
            
            astar = Astar()
            path = astar.driver(points)
    
            # print(path)
            i+=10
            
    # angle, top_image = chcone.PP(path, 1)
    # angle = math.floor(angle)
    
    # print("PP: ", angle)
    
    # start_pt = 1000,0  
    # angle = chcone.angle(start_pt,path[0],True)
    # angle = math.floor(angle)
    # print("Normal angle: ", angle)


onSinglePoint = False 
main(onSinglePoint)
